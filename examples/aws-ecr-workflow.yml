name: Build, Patch and Push to AWS ECR

on:
  push:
    branches: [ main ]

jobs:
  build-patch-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myapp
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Patch Container Image with Falcon Sensor
      uses: crowdstrike/falconutil-action@v1.0.0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      with:
        falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        source_image_uri: '${{ env.ECR_REGISTRY }}/myapp:latest'
        target_image_uri: '${{ env.ECR_REGISTRY }}/myapp:patched'
        cid: ${{ secrets.FALCON_CID }}

    - name: Push patched image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: docker push $ECR_REGISTRY/myapp:patched
