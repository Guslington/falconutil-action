name: Test Falcon Container Image Patching (workflow_dispatch)

on:
  workflow_dispatch:
    inputs:
      falcon_client_id:
        description: "CrowdStrike API Client ID for authentication"
        required: true
      falcon_region:
        description: "CrowdStrike API region. Allowed values are us-1, us-2, eu-1, us-gov-1, us-gov-2"
        required: true
        default: us-1
      version:
        description: "Falcon Container Sensor version to use (defaults to latest)"
        required: false
      cid:
        description: "Customer ID w/checksum to use (example 1234567890ABCDEFG-XY)"
        required: true
      source_image_uri:
        description: "Source Image URI to be patched"
        required: true
        default: "nginx:latest"
      target_image_uri:
        description: "Expected URI for patched Target Image"
        required: true
        default: "localhost:5000/nginx:patched"
      cloud_service:
        description: "Cloud Service platform. Allowed values: ACA | ACI | ECS_FARGATE | CLOUDRUN"
        required: false
      container:
        description: "Container name for identification in Falcon console"
        required: false
      container_group:
        description: "Azure container group name"
        required: false
      falconctl_opts:
        description: "falconctl options in a single string"
        required: false
      image_pull_policy:
        description: "PullPolicy for Source and Falcon Container Sensor Image"
        required: false
        default: "Always"
      resource_group:
        description: "Azure resource group name"
        required: false
      subscription:
        description: "Azure subscription id"
        required: false

jobs:
  test-falconutil-action:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up local registry for testing
        id: local_registry
        run: |
          # Start the registry and capture the container ID
          REGISTRY_ID=$(docker run -d -p 5000:5000 --name local-registry registry:2)

          # Save the container ID for later cleanup
          echo "REGISTRY_ID=$REGISTRY_ID" >> $GITHUB_ENV
          echo "registry_id=$REGISTRY_ID" >> $GITHUB_OUTPUT

          echo "Local registry running on localhost:5000 with ID: $REGISTRY_ID"

          # Test if registry is accessible
          curl -s http://localhost:5000/v2/ || echo "Registry API not responding"

      - name: Pull test image
        run: docker pull ${{ inputs.source_image_uri }}

      - name: Test Falcon Container Image Patching
        uses: ./
        with:
          falcon_client_id: ${{ inputs.falcon_client_id }}
          falcon_region: ${{ inputs.falcon_region }}
          version: ${{ inputs.version }}
          cid: ${{ inputs.cid }}
          source_image_uri: ${{ inputs.source_image_uri }}
          target_image_uri: ${{ inputs.target_image_uri }}
          cloud_service: ${{ inputs.cloud_service }}
          container: ${{ inputs.container }}
          container_group: ${{ inputs.container_group }}
          falconctl_opts: ${{ inputs.falconctl_opts }}
          image_pull_policy: ${{ inputs.image_pull_policy }}
          resource_group: ${{ inputs.resource_group }}
          subscription: ${{ inputs.subscription }}
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

      - name: Verify patched image exists
        run: |
          echo "Verifying patched image exists..."
          docker images

          if docker image inspect ${{ inputs.target_image_uri }} &> /dev/null; then
            echo "✅ Patched image successfully created: ${{ inputs.target_image_uri }}"
          else
            echo "❌ Failed to create patched image"
            exit 1
          fi

      - name: Cleanup local registry
        if: always()
        run: |
          echo "Cleaning up local registry with ID: $REGISTRY_ID"
          # Try to stop the container first
          docker stop local-registry || echo "Registry already stopped"
          # Remove the container to ensure complete cleanup
          docker rm -f local-registry || echo "Registry already removed"
          # Also try removal by ID as a backup method
          docker rm -f $REGISTRY_ID || echo "Failed to remove by ID"

          echo "Registry containers after cleanup:"
          docker ps -a | grep registry || echo "No registry containers found"
