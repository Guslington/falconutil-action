name: Test Action (push)

on:
  push:
  pull_request_target:
    types: [labeled]

jobs:
  fcs-scan:
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request_target' &&
      github.event.label.name == 'ok-to-test')
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    env:
      source_image_uri: "nginx:latest"
      target_image_uri: "localhost:5000/nginx:patched"
      falconctl_opts: "--tags=test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up local registry for testing
        id: local_registry
        run: |
          # Start the registry and capture the container ID
          REGISTRY_ID=$(docker run -d -p 5000:5000 --name local-registry registry:2)

          # Save the container ID for later cleanup
          echo "REGISTRY_ID=$REGISTRY_ID" >> $GITHUB_ENV
          echo "registry_id=$REGISTRY_ID" >> $GITHUB_OUTPUT

          echo "Local registry running on localhost:5000 with ID: $REGISTRY_ID"

          # Test if registry is accessible
          curl -s http://localhost:5000/v2/ || echo "Registry API not responding"

      - name: Pull test image
        run: docker pull ${{ env.source_image_uri }}

      - name: Test Falcon Container Image Patching
        uses: ./
        with:
          falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
          falcon_region: ${{ vars.FALCON_CLOUD_REGION }}
          cid: ${{ vars.cid }}
          source_image_uri: ${{ env.source_image_uri }}
          target_image_uri: ${{ env.target_image_uri }}
          falconctl_opts: ${{ env.falconctl_opts }}
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

      - name: Verify patched image exists
        run: |
          echo "Verifying patched image exists..."
          docker images

          if docker image inspect ${{ env.target_image_uri }} &> /dev/null; then
            echo "✅ Patched image successfully created: ${{ env.target_image_uri }}"
          else
            echo "❌ Failed to create patched image"
            exit 1
          fi

      - name: Cleanup local registry
        if: always()
        run: |
          echo "Cleaning up local registry with ID: $REGISTRY_ID"
          # Try to stop the container first
          docker stop local-registry || echo "Registry already stopped"
          # Remove the container to ensure complete cleanup
          docker rm -f local-registry || echo "Registry already removed"
          # Also try removal by ID as a backup method
          docker rm -f $REGISTRY_ID || echo "Failed to remove by ID"

          echo "Registry containers after cleanup:"
          docker ps -a | grep registry || echo "No registry containers found"

      - name: Test Falconutil action
        uses: ./
        with:
          falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
          falcon_region: ${{ vars.FALCON_CLOUD_REGION }}
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
